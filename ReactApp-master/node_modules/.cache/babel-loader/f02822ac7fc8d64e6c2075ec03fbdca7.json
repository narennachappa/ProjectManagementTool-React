{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _isFunction2 = require('lodash/isFunction');\n\nvar _isFunction3 = _interopRequireDefault(_isFunction2);\n\nvar _extends = Object.assign || function (target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i];\n\n    for (var key in source) {\n      if (Object.prototype.hasOwnProperty.call(source, key)) {\n        target[key] = source[key];\n      }\n    }\n  }\n\n  return target;\n};\n\nexports.deleteFile = deleteFile;\nexports.writeMetadataToDb = writeMetadataToDb;\nexports.uploadFileWithProgress = uploadFileWithProgress;\n\nvar _constants = require('../constants');\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nvar FILE_UPLOAD_ERROR = _constants.actionTypes.FILE_UPLOAD_ERROR,\n    FILE_UPLOAD_PROGRESS = _constants.actionTypes.FILE_UPLOAD_PROGRESS;\n\nfunction deleteFile(firebase, _ref) {\n  var path = _ref.path,\n      dbPath = _ref.dbPath;\n  return firebase.storage().ref(path).delete().then(function () {\n    if (!dbPath || !firebase.database && !firebase.firestore) {\n      return {\n        path: path\n      };\n    }\n\n    var metaDeletePromise = function metaDeletePromise() {\n      return firebase._.config.useFirestoreForStorageMeta ? firebase.firestore().doc(dbPath).delete() : firebase.database().ref(dbPath).remove();\n    };\n\n    return metaDeletePromise().then(function () {\n      return {\n        path: path,\n        dbPath: dbPath\n      };\n    });\n  });\n}\n\nfunction createUploadMetaResponseHandler(_ref2) {\n  var fileData = _ref2.fileData,\n      firebase = _ref2.firebase,\n      uploadTaskSnapshot = _ref2.uploadTaskSnapshot;\n  return function uploadResultFromSnap(metaDataSnapshot) {\n    var useFirestoreForStorageMeta = firebase._.config.useFirestoreForStorageMeta;\n    var result = {\n      snapshot: metaDataSnapshot,\n      key: metaDataSnapshot.key || metaDataSnapshot.id,\n      File: fileData,\n      metaDataSnapshot: metaDataSnapshot,\n      uploadTaskSnapshot: uploadTaskSnapshot,\n      uploadTaskSnaphot: uploadTaskSnapshot,\n      createdAt: useFirestoreForStorageMeta ? firebase.firestore.FieldValue.serverTimestamp() : firebase.database.ServerValue.TIMESTAMP\n    };\n\n    if (metaDataSnapshot.id) {\n      result.id = metaDataSnapshot.id;\n    }\n\n    if (metaDataSnapshot.downloadURLs && metaDataSnapshot.downloadURLs[0]) {\n      result.downloadURL = metaDataSnapshot.downloadURLs[0];\n    } else if (uploadTaskSnapshot.ref && typeof uploadTaskSnapshot.ref.getDownloadURL === 'function') {\n      return uploadTaskSnapshot.ref.getDownloadURL().then(function (downloadURL) {\n        return _extends({}, result, {\n          downloadURL: downloadURL\n        });\n      });\n    }\n\n    return result;\n  };\n}\n\nfunction writeMetadataToDb(_ref3) {\n  var firebase = _ref3.firebase,\n      uploadTaskSnapshot = _ref3.uploadTaskSnapshot,\n      dbPath = _ref3.dbPath,\n      options = _ref3.options;\n  var _firebase$_$config = firebase._.config,\n      fileMetadataFactory = _firebase$_$config.fileMetadataFactory,\n      useFirestoreForStorageMeta = _firebase$_$config.useFirestoreForStorageMeta;\n  var metadataFactory = options.metadataFactory;\n  var metaFactoryFunction = metadataFactory || fileMetadataFactory;\n  var fileData = (0, _isFunction3.default)(metaFactoryFunction) ? metaFactoryFunction(uploadTaskSnapshot, firebase, uploadTaskSnapshot.metadata) : uploadTaskSnapshot.metadata;\n  var resultFromSnap = createUploadMetaResponseHandler({\n    fileData: fileData,\n    firebase: firebase,\n    uploadTaskSnapshot: uploadTaskSnapshot\n  });\n\n  var metaSetPromise = function metaSetPromise(fileData) {\n    return useFirestoreForStorageMeta ? firebase.firestore().collection(dbPath).add(fileData) : firebase.database().ref(dbPath).push(fileData);\n  };\n\n  return metaSetPromise(fileData).then(resultFromSnap);\n}\n\nfunction uploadFileWithProgress(dispatch, firebase, _ref4) {\n  var path = _ref4.path,\n      file = _ref4.file,\n      filename = _ref4.filename,\n      meta = _ref4.meta;\n  var uploadEvent = firebase.storage().ref(path + '/' + filename).put(file);\n  var unListen = uploadEvent.on(firebase.storage.TaskEvent.STATE_CHANGED, {\n    next: function next(snapshot) {\n      dispatch({\n        type: FILE_UPLOAD_PROGRESS,\n        meta: meta,\n        payload: {\n          snapshot: snapshot,\n          percent: Math.floor(snapshot.bytesTransferred / snapshot.totalBytes * 100)\n        }\n      });\n    },\n    error: function error(err) {\n      dispatch({\n        type: FILE_UPLOAD_ERROR,\n        meta: meta,\n        payload: err\n      });\n      unListen();\n    },\n    complete: function complete() {\n      unListen();\n    }\n  });\n  return uploadEvent;\n}","map":{"version":3,"sources":["C:/Users/naren/Desktop/ReactApp-master/ReactApp-master/node_modules/react-redux-firebase/es/utils/storage.js"],"names":["Object","defineProperty","exports","value","_isFunction2","require","_isFunction3","_interopRequireDefault","_extends","assign","target","i","arguments","length","source","key","prototype","hasOwnProperty","call","deleteFile","writeMetadataToDb","uploadFileWithProgress","_constants","obj","__esModule","default","FILE_UPLOAD_ERROR","actionTypes","FILE_UPLOAD_PROGRESS","firebase","_ref","path","dbPath","storage","ref","delete","then","database","firestore","metaDeletePromise","_","config","useFirestoreForStorageMeta","doc","remove","createUploadMetaResponseHandler","_ref2","fileData","uploadTaskSnapshot","uploadResultFromSnap","metaDataSnapshot","result","snapshot","id","File","uploadTaskSnaphot","createdAt","FieldValue","serverTimestamp","ServerValue","TIMESTAMP","downloadURLs","downloadURL","getDownloadURL","_ref3","options","_firebase$_$config","fileMetadataFactory","metadataFactory","metaFactoryFunction","metadata","resultFromSnap","metaSetPromise","collection","add","push","dispatch","_ref4","file","filename","meta","uploadEvent","put","unListen","on","TaskEvent","STATE_CHANGED","next","type","payload","percent","Math","floor","bytesTransferred","totalBytes","error","err","complete"],"mappings":"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","sourcesContent":["'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _isFunction2 = require('lodash/isFunction');\n\nvar _isFunction3 = _interopRequireDefault(_isFunction2);\n\nvar _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };\n\nexports.deleteFile = deleteFile;\nexports.writeMetadataToDb = writeMetadataToDb;\nexports.uploadFileWithProgress = uploadFileWithProgress;\n\nvar _constants = require('../constants');\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nvar FILE_UPLOAD_ERROR = _constants.actionTypes.FILE_UPLOAD_ERROR,\n    FILE_UPLOAD_PROGRESS = _constants.actionTypes.FILE_UPLOAD_PROGRESS;\nfunction deleteFile(firebase, _ref) {\n  var path = _ref.path,\n      dbPath = _ref.dbPath;\n\n  return firebase.storage().ref(path).delete().then(function () {\n    if (!dbPath || !firebase.database && !firebase.firestore) {\n      return { path: path };\n    }\n\n    var metaDeletePromise = function metaDeletePromise() {\n      return firebase._.config.useFirestoreForStorageMeta ? firebase.firestore().doc(dbPath).delete() : firebase.database().ref(dbPath).remove();\n    };\n\n    return metaDeletePromise().then(function () {\n      return { path: path, dbPath: dbPath };\n    });\n  });\n}\n\nfunction createUploadMetaResponseHandler(_ref2) {\n  var fileData = _ref2.fileData,\n      firebase = _ref2.firebase,\n      uploadTaskSnapshot = _ref2.uploadTaskSnapshot;\n\n  return function uploadResultFromSnap(metaDataSnapshot) {\n    var useFirestoreForStorageMeta = firebase._.config.useFirestoreForStorageMeta;\n\n    var result = {\n      snapshot: metaDataSnapshot,\n      key: metaDataSnapshot.key || metaDataSnapshot.id,\n      File: fileData,\n      metaDataSnapshot: metaDataSnapshot,\n      uploadTaskSnapshot: uploadTaskSnapshot,\n\n      uploadTaskSnaphot: uploadTaskSnapshot,\n      createdAt: useFirestoreForStorageMeta ? firebase.firestore.FieldValue.serverTimestamp() : firebase.database.ServerValue.TIMESTAMP\n    };\n    if (metaDataSnapshot.id) {\n      result.id = metaDataSnapshot.id;\n    }\n\n    if (metaDataSnapshot.downloadURLs && metaDataSnapshot.downloadURLs[0]) {\n      result.downloadURL = metaDataSnapshot.downloadURLs[0];\n    } else if (uploadTaskSnapshot.ref && typeof uploadTaskSnapshot.ref.getDownloadURL === 'function') {\n      return uploadTaskSnapshot.ref.getDownloadURL().then(function (downloadURL) {\n        return _extends({}, result, {\n          downloadURL: downloadURL\n        });\n      });\n    }\n\n    return result;\n  };\n}\n\nfunction writeMetadataToDb(_ref3) {\n  var firebase = _ref3.firebase,\n      uploadTaskSnapshot = _ref3.uploadTaskSnapshot,\n      dbPath = _ref3.dbPath,\n      options = _ref3.options;\n  var _firebase$_$config = firebase._.config,\n      fileMetadataFactory = _firebase$_$config.fileMetadataFactory,\n      useFirestoreForStorageMeta = _firebase$_$config.useFirestoreForStorageMeta;\n  var metadataFactory = options.metadataFactory;\n\n  var metaFactoryFunction = metadataFactory || fileMetadataFactory;\n\n  var fileData = (0, _isFunction3.default)(metaFactoryFunction) ? metaFactoryFunction(uploadTaskSnapshot, firebase, uploadTaskSnapshot.metadata) : uploadTaskSnapshot.metadata;\n\n  var resultFromSnap = createUploadMetaResponseHandler({\n    fileData: fileData,\n    firebase: firebase,\n    uploadTaskSnapshot: uploadTaskSnapshot\n  });\n\n  var metaSetPromise = function metaSetPromise(fileData) {\n    return useFirestoreForStorageMeta ? firebase.firestore().collection(dbPath).add(fileData) : firebase.database().ref(dbPath).push(fileData);\n  };\n\n  return metaSetPromise(fileData).then(resultFromSnap);\n}\n\nfunction uploadFileWithProgress(dispatch, firebase, _ref4) {\n  var path = _ref4.path,\n      file = _ref4.file,\n      filename = _ref4.filename,\n      meta = _ref4.meta;\n\n  var uploadEvent = firebase.storage().ref(path + '/' + filename).put(file);\n\n  var unListen = uploadEvent.on(firebase.storage.TaskEvent.STATE_CHANGED, {\n    next: function next(snapshot) {\n      dispatch({\n        type: FILE_UPLOAD_PROGRESS,\n        meta: meta,\n        payload: {\n          snapshot: snapshot,\n          percent: Math.floor(snapshot.bytesTransferred / snapshot.totalBytes * 100)\n        }\n      });\n    },\n    error: function error(err) {\n      dispatch({ type: FILE_UPLOAD_ERROR, meta: meta, payload: err });\n      unListen();\n    },\n    complete: function complete() {\n      unListen();\n    }\n  });\n  return uploadEvent;\n}"]},"metadata":{},"sourceType":"script"}